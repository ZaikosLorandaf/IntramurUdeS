CREATE SCHEMA IF NOT EXISTS intramurudes;
SET search_path = intramurudes;

CREATE TABLE sport(
                      id INT GENERATED BY DEFAULT AS IDENTITY,
                      name VARCHAR(100) NOT NULL,
                      nb_team_match INT NOT NULL DEFAULT 2,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY(id),
                      UNIQUE(name)
);

CREATE TABLE league(
                       id INT GENERATED BY DEFAULT AS IDENTITY,
                       name VARCHAR(127) NOT NULL,
                       begin_date DATE,
                       end_date DATE,
                       done BOOL DEFAULT false,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       id_sport INT NOT NULL,
                       PRIMARY KEY(id),
                       FOREIGN KEY(id_sport) REFERENCES sport(id) ON DELETE CASCADE
);

CREATE TABLE team(
                     id INT GENERATED BY DEFAULT AS IDENTITY,
                     name VARCHAR(127) NOT NULL,
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     id_league INT NOT NULL,
                     PRIMARY KEY(id),
                     FOREIGN KEY(id_league) REFERENCES league(id) ON DELETE CASCADE
);

CREATE TABLE player(
                       id INT GENERATED BY DEFAULT AS IDENTITY,
                       name VARCHAR(127),
                       last_name VARCHAR(127),
                       number INT,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       id_team INT NOT NULL,
                       PRIMARY KEY(id),
                       FOREIGN KEY(id_team) REFERENCES team(id) ON DELETE CASCADE
);

CREATE TABLE match_(
                       id INT GENERATED BY DEFAULT AS IDENTITY,
                       date_match DATE,
                       begin_time TIME,
                       end_time TIME,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       id_league INT,
                       PRIMARY KEY(id),
                       FOREIGN KEY(id_league) REFERENCES league(id) ON DELETE CASCADE
);

CREATE TABLE season(
                       id INT GENERATED BY DEFAULT AS IDENTITY,
                       season_year INT NOT NULL,
                       time_precision VARCHAR(127),
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       PRIMARY KEY(id)
);

CREATE TABLE stat_statement(
                               id INT GENERATED BY DEFAULT AS IDENTITY,
                               statement TEXT,
                               acronym VARCHAR(4),
                               created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                               PRIMARY KEY(id)
);

CREATE TABLE team_stat(
                          id INT GENERATED BY DEFAULT AS IDENTITY,
                          value_ VARCHAR(127),
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          id_season INT,
                          id_match INT NOT NULL,
                          id_stat_statement INT NOT NULL,
                          id_team INT NOT NULL,
                          PRIMARY KEY(id),
                          FOREIGN KEY(id_season) REFERENCES season(id) ON DELETE CASCADE,
                          FOREIGN KEY(id_match) REFERENCES match_(id) ON DELETE CASCADE,
                          FOREIGN KEY(id_stat_statement) REFERENCES stat_statement(id) ON DELETE CASCADE,
                          FOREIGN KEY(id_team) REFERENCES team(id) ON DELETE CASCADE
);

CREATE TABLE player_stat(
                            id INT GENERATED BY DEFAULT AS IDENTITY,
                            value_ VARCHAR(127),
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            id_match INT NOT NULL,
                            id_stat_statement INT NOT NULL,
                            id_season INT,
                            id_player INT NOT NULL,
                            PRIMARY KEY(id),
                            FOREIGN KEY(id_match) REFERENCES match_(id) ON DELETE CASCADE,
                            FOREIGN KEY(id_stat_statement) REFERENCES stat_statement(id) ON DELETE CASCADE,
                            FOREIGN KEY(id_season) REFERENCES season(id) ON DELETE CASCADE,
                            FOREIGN KEY(id_player) REFERENCES player(id) ON DELETE CASCADE
);

CREATE TABLE role(
                     id INT GENERATED BY DEFAULT AS IDENTITY,
                     role_name VARCHAR(127),
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     PRIMARY KEY(id)
);

CREATE TABLE user_(
                      id INT GENERATED BY DEFAULT AS IDENTITY,
                      username VARCHAR(127) NOT NULL,
                      password VARCHAR(127) NOT NULL,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY(id),
                      UNIQUE(username)
);

CREATE TABLE log(
                    id INT GENERATED BY DEFAULT AS IDENTITY,
                    text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(id)
);

CREATE TABLE match_team(
                           id_team INT,
                           id_match INT,
                           PRIMARY KEY(id_team, id_match),
                           FOREIGN KEY(id_team) REFERENCES team(id) ON DELETE CASCADE,
                           FOREIGN KEY(id_match) REFERENCES match_(id) ON DELETE CASCADE
);

CREATE TABLE league_season(
                              id_league INT,
                              id_season INT,
                              PRIMARY KEY(id_league, id_season),
                              FOREIGN KEY(id_league) REFERENCES league(id) ON DELETE CASCADE,
                              FOREIGN KEY(id_season) REFERENCES season(id) ON DELETE CASCADE
);

CREATE TABLE role_user(
                          id_role INT,
                          id_user INT,
                          PRIMARY KEY(id_role, id_user),
                          FOREIGN KEY(id_role) REFERENCES role(id) ON DELETE CASCADE,
                          FOREIGN KEY(id_user) REFERENCES user_(id) ON DELETE CASCADE
);

CREATE TABLE stat_statement_sport(
                                     id_sport INT,
                                     id_stat_statement INT,
                                     PRIMARY KEY(id_sport, id_stat_statement),
                                     FOREIGN KEY(id_sport) REFERENCES sport(id) ON DELETE CASCADE,
                                     FOREIGN KEY(id_stat_statement) REFERENCES stat_statement(id) ON DELETE CASCADE
);

CREATE OR REPLACE VIEW v_league_sport
AS
SELECT l.id AS id_league, l.name AS name_league, l.begin_date, l.end_date, l.done,
       s.id AS id_sport, s.name AS name_soprt, s.nb_team_match
FROM league AS l
         INNER JOIN intramurudes.sport s ON l.id_sport = s.id;

CREATE OR REPLACE VIEW v_match_teams AS
SELECT m.id AS id_match, m.date_match, m.begin_time, m.end_time,
       COUNT(mt.id_team) AS nb_teams, ARRAY_AGG(id_team) AS list_teams
FROM match_ m
         INNER JOIN intramurudes.match_team mt ON m.id = mt.id_match
GROUP BY m.id, m.date_match, m.begin_time, m.end_time;

CREATE OR REPLACE VIEW v_team_league_sport
AS
SELECT t.id AS id_team, t.name AS team_name,
       l.id AS id_league, l.name AS league_name, l.begin_date, l.end_date,
       s.id AS sport_id, s.name AS sport_name, s.nb_team_match
FROM intramurudes.team t
         INNER JOIN intramurudes.league l ON l.id = t.id_league
         INNER JOIN intramurudes.sport s ON s.id = l.id_sport;

CREATE OR REPLACE VIEW v_match_league_sport
AS
SELECT m.id AS match_id, m.date_match, m.begin_time, m.end_time,
       l.id AS id_league, l.name AS name_league, l.begin_date, l.end_date, l.done,
       s.id AS id_sport, s.name AS name_sport, s.nb_team_match
FROM match_ m
         INNER JOIN league l ON l.id = m.id_league
         INNER JOIN sport s ON s.id = l.id_sport;

CREATE OR REPLACE VIEW v_player_team_league_sport
AS
SELECT p.id AS id_player, p.name AS player_name, p.last_name, p.number,
       t.id AS id_team, t.name AS team_name,
       l.id AS id_league, l.name AS league_name, l.begin_date, l.end_date,
       s.id AS sport_id, s.name AS sport_name, s.nb_team_match
FROM intramurudes.player p
         INNER JOIN intramurudes.team t ON t.id = p.id_team
         INNER JOIN intramurudes.league l ON l.id = t.id_league
         INNER JOIN intramurudes.sport s ON s.id = l.id_sport;

ALTER TABLE league ADD CONSTRAINT league_name_sport_id_unique UNIQUE  (name, id_sport);

ALTER TABLE team ADD CONSTRAINT team_name_league_id UNIQUE (name, id_league);

ALTER TABLE player ADD CONSTRAINT player_number_team_id_unique UNIQUE  (number, id_team);

/**
  Fonction qui donne le nombre de places restantes pour le match
 */
CREATE OR REPLACE FUNCTION get_place_left_match(id_new_match INT)
    RETURNS INT
    LANGUAGE SQL
AS $$
SELECT ((SELECT nb_team_match FROM v_league_sport vls
         WHERE id_league = (SELECT id_league FROM match_
                            WHERE id = id_new_match))
    -
        (SELECT COUNT(id_team) FROM match_team
         WHERE id_match = id_new_match));
$$;

/**
  Trigger pour s'assurer que toutes les équipes d'un match sont dans la même ligue
 */
CREATE OR REPLACE FUNCTION check_team_good_league(id_new_team INT, id_new_match INT)
    RETURNS BOOLEAN
    LANGUAGE SQL
AS $$
SELECT((SELECT m.id_league
        FROM match_ m
        WHERE m.id = id_new_match) IS NULL
    OR
       (SELECT vtls.id_league
        FROM v_team_league_sport vtls
        WHERE vtls.id_team = id_new_team) =
       ((SELECT m.id_league FROM match_ m
         WHERE m.id = id_new_match))
          );
$$;

/**
  Fonction pour vérifier chevauchement match
 */
CREATE OR REPLACE FUNCTION get_match_overlap(id_team_check INT, new_match_id INT)
    RETURNS SETOF INT
    LANGUAGE SQL
AS $$
SELECT id FROM match_ m
                   INNER JOIN intramurudes.match_team mt ON m.id = mt.id_match
WHERE m.date_match = (SELECT date_match FROM match_ WHERE id = new_match_id)
  AND
    (m.begin_time, m.end_time) OVERLAPS ((SELECT m2.begin_time FROM match_ m2 WHERE id = new_match_id),
                                         (SELECT m2.end_time FROM match_ m2 WHERE id = new_match_id))
  AND
    mt.id_team = id_team_check;
$$;

CREATE OR REPLACE FUNCTION check_before_insert_match_team()
    RETURNS TRIGGER
    LANGUAGE plpgsql
AS $$
BEGIN
    IF NOT EXISTS(SELECT get_match_overlap(new.id_team,
                                           new.id_match))
    THEN
        IF ((SELECT get_place_left_match(new.id_match)) > 0)
        THEN
            IF (SELECT check_team_good_league(new.id_team, new.id_match))
            THEN
                RETURN new;
            ELSE
                RAISE 'Team is not in the good league';
            END IF;
        ELSE
            RAISE 'Match is full';
        END IF;
    ELSE
        RAISE 'Match overlaps with another match of the team';
    END IF;
END;
$$;

CREATE TRIGGER trg_check_insert_match_team
    BEFORE INSERT ON match_team
    FOR EACH ROW
EXECUTE function check_before_insert_match_team();
